esphome:
  name: esphome-web-9c1b24
  friendly_name: Bed Shaker ESP32
  min_version: 2024.11.0
  name_add_mac_suffix: false

esp32:
  board: airm2m_core_esp32c3
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
    networks:
    - ssid: Gugu_Wifi
      password: cdd57dba84

    - ssid: Gugu_Wifi-Wi-Fi5
      password: cdd57dba84

    ap:
        ssid: "Bed Shaker"
        password: "cdd57dba84"

captive_portal:

#Web serverr GUI
web_server:
  port: 80

  
#status led
#light
#  - platform: status_led
#    name: "Led de estado"
#    internal: True
#    pin:
#      number: GPIO12
#    icon: mdi:led-outline

#PWM output
output:
  - platform: ledc
    pin: GPIO00
    frequency: "1220Hz"
    id: vibrator

# Test
button:
  - platform: template
    name: "Bed Shaker"
    id: test
    icon: mdi:vibrate
    on_press:
      then:
        - output.turn_on: vibrator
        - output.set_level:
            id: vibrator
            level: !lambda "return id(level).state/100;"
        - delay: 1s
        - output.turn_off: vibrator

#Oboard button
binary_sensor:
  # snozee sensor
  - platform: template
    name: "snozee universal"
    id: snozee
    #icon: mdi:alarm-check
  
  #Boot button
  - platform: gpio
    pin: 
      number: GPIO09
      inverted: true
      mode:
        input: true
        pullup: true
    name: "Boot button"
    icon: mdi:chip
    id: ob_button
    on_press: 
      then:
        - binary_sensor.template.publish:
            id: snozee
            state: True
    on_release: 
      then:
        - binary_sensor.template.publish:
            id: snozee
            state: False

  #Remote button ok
  - platform: remote_receiver
    name: "Ok button"
    internal: True
    raw: 
      code: [9097, -4460, 630, -527, 607, -527, 605, -529, 606, -528, 605, -528, 606, -529, 605, -529, 606, -529, 603, -1614, 630, -1612, 628, -1614, 628, -1613, 629, -1613, 627, -1614, 628, -1614, 628, -1614, 626, -531, 603, -531, 604, -1616, 624]
    on_press: 
      then:
        - binary_sensor.template.publish:
            id: snozee
            state: True
        - delay: 1s
        - binary_sensor.template.publish:
            id: snozee
            state: False

  #Remote button *
  - platform: remote_receiver
    name: "* button"
    internal: True
    raw: 
      code: [9058, -4487, 597, -537, 598, -533, 596, -539, 594, -539, 595, -536, 597, -536, 598, -536, 597, -537, 595, -1645, 597, -1641, 596, -1645, 597, -1643, 621, -1619, 596, -1644, 594, -1645, 597, -1644, 592, -540, 593, -1646, 595, -1644, 595]
    on_press: 
      then:
        button.press: test

#Shake routine activator
switch:
  - platform: template
    name: "Shake routine"
    icon: mdi:alarm-multiple
    id: routine
    optimistic: True
    on_turn_on:
      then:
        - if:
            condition:
                lambda: 'return id(selector).state == "simple";'
            then:
                - script.execute: shake_simple
        - if:
            condition:
                lambda: 'return id(selector).state == "anoying";'
            then:
                - script.execute: shake_simple
                - switch.template.publish:
                    id: definitive
                    state: ON
        - if:
            condition:
                lambda: 'return id(selector).state == "advances";'
            then:
              - script.execute: shake_advanced
              
      #- script.execute: shake_advanced
    on_turn_off:
      then:
        #Shake anoying helper
        - if:
            condition:
              all:
                - lambda: 'return id(selector).state == "anoying";'
                - switch.is_on: definitive
            then:
              - script.stop: shake_simple
              - output.turn_off: vibrator
              - delay: 30s
              - script.execute: shake_simple
            #Usual turn of
            else:
              - script.stop: shake_simple
              - script.stop: shake_advanced
              - output.turn_off: vibrator

#Helper for anoying routine
  - platform: template
    name: "Snoze definitivo"
    icon: mdi:alarm-multiple
    id: definitive
    optimistic: True


#Selector for shake mode
select:
  - platform: template
    name: "Shake mode"
    icon: mdi:cog-box
    id: selector
    optimistic: true
    options:
      - simple
      - advanced
      - anoying
    initial_option: simple
    restore_value: True

#Level controller MANUAL
number:
  - platform: template
    name: "Level"
    icon: mdi:knob
    id: level
    optimistic: true
    unit_of_measurement: "%"
    min_value: 0
    max_value: 100
    step: 1
    restore_value: True

#Level controller Internal Advanced routine
  - platform: template
    id: helper_level
    optimistic: true
    internal: True
    min_value: 20
    max_value: 100
    step: 1


###############################################################
#Scrips and automations
script:
  - id: shake_simple
    mode: queued
    then:
       - delay: 3s
       - output.set_level:
            id: vibrator
            level: !lambda "return id(level).state/100;"
       - delay: 1s
       - output.turn_off: vibrator
       - script.execute: shake_simple

######################################################################
#advanced
  - id: shake_advanced
    mode: queued
    then:
    #Set helper to 0
      - number.to_min: helper_level
      #increment routine
      - while:
          condition:
            number.in_range:
              id: helper_level
              below: 99
          then:
            - number.increment:
                id: helper_level
                cycle: True

            - output.set_level:
                id: vibrator
                level: !lambda "return id(helper_level).state/100;"
            - delay: 20ms
      
      - output.turn_off: vibrator
      - delay: 3s
      - script.execute: shake_advanced

#IR sensor
remote_receiver:
  pin: 
    number: GPIO02
    inverted: true
    mode: INPUT_PULLUP
  dump: raw

